// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package readerclient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type CompletionStatus string

const (
	CompletionStatusUnprocessed                CompletionStatus = "UNPROCESSED"
	CompletionStatusAccepted                   CompletionStatus = "ACCEPTED"
	CompletionStatusRejected                   CompletionStatus = "REJECTED"
	CompletionStatusException                  CompletionStatus = "EXCEPTION"
	CompletionStatusMachineHalted              CompletionStatus = "MACHINE_HALTED"
	CompletionStatusCycleLimitExceeded         CompletionStatus = "CYCLE_LIMIT_EXCEEDED"
	CompletionStatusTimeLimitExceeded          CompletionStatus = "TIME_LIMIT_EXCEEDED"
	CompletionStatusPayloadLengthLimitExceeded CompletionStatus = "PAYLOAD_LENGTH_LIMIT_EXCEEDED"
)

// __getInputInput is used internally by genqlient
type __getInputInput struct {
	Index int `json:"index"`
}

// GetIndex returns __getInputInput.Index, and is useful for accessing the field via an interface.
func (v *__getInputInput) GetIndex() int { return v.Index }

// __getInputNoticesInput is used internally by genqlient
type __getInputNoticesInput struct {
	InputIndex int `json:"inputIndex"`
}

// GetInputIndex returns __getInputNoticesInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getInputNoticesInput) GetInputIndex() int { return v.InputIndex }

// __getInputReportsInput is used internally by genqlient
type __getInputReportsInput struct {
	InputIndex int `json:"inputIndex"`
}

// GetInputIndex returns __getInputReportsInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getInputReportsInput) GetInputIndex() int { return v.InputIndex }

// __getInputVouchersInput is used internally by genqlient
type __getInputVouchersInput struct {
	InputIndex int `json:"inputIndex"`
}

// GetInputIndex returns __getInputVouchersInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getInputVouchersInput) GetInputIndex() int { return v.InputIndex }

// __getNoticeInput is used internally by genqlient
type __getNoticeInput struct {
	NoticeIndex int `json:"noticeIndex"`
	InputIndex  int `json:"inputIndex"`
}

// GetNoticeIndex returns __getNoticeInput.NoticeIndex, and is useful for accessing the field via an interface.
func (v *__getNoticeInput) GetNoticeIndex() int { return v.NoticeIndex }

// GetInputIndex returns __getNoticeInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getNoticeInput) GetInputIndex() int { return v.InputIndex }

// __getReportInput is used internally by genqlient
type __getReportInput struct {
	ReportIndex int `json:"reportIndex"`
	InputIndex  int `json:"inputIndex"`
}

// GetReportIndex returns __getReportInput.ReportIndex, and is useful for accessing the field via an interface.
func (v *__getReportInput) GetReportIndex() int { return v.ReportIndex }

// GetInputIndex returns __getReportInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getReportInput) GetInputIndex() int { return v.InputIndex }

// __getVoucherInput is used internally by genqlient
type __getVoucherInput struct {
	VoucherIndex int `json:"voucherIndex"`
	InputIndex   int `json:"inputIndex"`
}

// GetVoucherIndex returns __getVoucherInput.VoucherIndex, and is useful for accessing the field via an interface.
func (v *__getVoucherInput) GetVoucherIndex() int { return v.VoucherIndex }

// GetInputIndex returns __getVoucherInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getVoucherInput) GetInputIndex() int { return v.InputIndex }

// getInputInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Status of the input
	Status CompletionStatus `json:"status"`
	// Address responsible for submitting the input
	MsgSender string `json:"msgSender"`
	// Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
	Timestamp string `json:"timestamp"`
	// Number of the base layer block in which the input was recorded
	BlockNumber string `json:"blockNumber"`
	// Input payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Get notices from this particular input with support for pagination
	Notices getInputInputNoticesNoticeConnection `json:"notices"`
	// Get vouchers from this particular input with support for pagination
	Vouchers getInputInputVouchersVoucherConnection `json:"vouchers"`
	// Get reports from this particular input with support for pagination
	Reports getInputInputReportsReportConnection `json:"reports"`
}

// GetIndex returns getInputInput.Index, and is useful for accessing the field via an interface.
func (v *getInputInput) GetIndex() int { return v.Index }

// GetStatus returns getInputInput.Status, and is useful for accessing the field via an interface.
func (v *getInputInput) GetStatus() CompletionStatus { return v.Status }

// GetMsgSender returns getInputInput.MsgSender, and is useful for accessing the field via an interface.
func (v *getInputInput) GetMsgSender() string { return v.MsgSender }

// GetTimestamp returns getInputInput.Timestamp, and is useful for accessing the field via an interface.
func (v *getInputInput) GetTimestamp() string { return v.Timestamp }

// GetBlockNumber returns getInputInput.BlockNumber, and is useful for accessing the field via an interface.
func (v *getInputInput) GetBlockNumber() string { return v.BlockNumber }

// GetPayload returns getInputInput.Payload, and is useful for accessing the field via an interface.
func (v *getInputInput) GetPayload() string { return v.Payload }

// GetNotices returns getInputInput.Notices, and is useful for accessing the field via an interface.
func (v *getInputInput) GetNotices() getInputInputNoticesNoticeConnection { return v.Notices }

// GetVouchers returns getInputInput.Vouchers, and is useful for accessing the field via an interface.
func (v *getInputInput) GetVouchers() getInputInputVouchersVoucherConnection { return v.Vouchers }

// GetReports returns getInputInput.Reports, and is useful for accessing the field via an interface.
func (v *getInputInput) GetReports() getInputInputReportsReportConnection { return v.Reports }

// getInputInputNoticesNoticeConnection includes the requested fields of the GraphQL type NoticeConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputInputNoticesNoticeConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputInputNoticesNoticeConnectionEdgesNoticeEdge `json:"edges"`
}

// GetEdges returns getInputInputNoticesNoticeConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnection) GetEdges() []getInputInputNoticesNoticeConnectionEdgesNoticeEdge {
	return v.Edges
}

// getInputInputNoticesNoticeConnectionEdgesNoticeEdge includes the requested fields of the GraphQL type NoticeEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputInputNoticesNoticeConnectionEdgesNoticeEdge struct {
	// Node instance
	Node getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice `json:"node"`
}

// GetNode returns getInputInputNoticesNoticeConnectionEdgesNoticeEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdge) GetNode() getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice {
	return v.Node
}

// getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Proof object that allows this notice to be validated by the base layer blockchain
	Proof getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof `json:"proof"`
}

// GetIndex returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Index, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetPayload() string {
	return v.Payload
}

// GetProof returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Proof, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetProof() getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof {
	return v.Proof
}

// getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof struct {
	// Validity proof for an output
	Validity getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Validity, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetValidity() getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Context, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetContext() string {
	return v.Context
}

// getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getInputInputReportsReportConnection includes the requested fields of the GraphQL type ReportConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputInputReportsReportConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputInputReportsReportConnectionEdgesReportEdge `json:"edges"`
}

// GetEdges returns getInputInputReportsReportConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnection) GetEdges() []getInputInputReportsReportConnectionEdgesReportEdge {
	return v.Edges
}

// getInputInputReportsReportConnectionEdgesReportEdge includes the requested fields of the GraphQL type ReportEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputInputReportsReportConnectionEdgesReportEdge struct {
	// Node instance
	Node getInputInputReportsReportConnectionEdgesReportEdgeNodeReport `json:"node"`
}

// GetNode returns getInputInputReportsReportConnectionEdgesReportEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnectionEdgesReportEdge) GetNode() getInputInputReportsReportConnectionEdgesReportEdgeNodeReport {
	return v.Node
}

// getInputInputReportsReportConnectionEdgesReportEdgeNodeReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getInputInputReportsReportConnectionEdgesReportEdgeNodeReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputInputReportsReportConnectionEdgesReportEdgeNodeReport.Index, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnectionEdgesReportEdgeNodeReport) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputInputReportsReportConnectionEdgesReportEdgeNodeReport.Payload, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnectionEdgesReportEdgeNodeReport) GetPayload() string {
	return v.Payload
}

// getInputInputVouchersVoucherConnection includes the requested fields of the GraphQL type VoucherConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputInputVouchersVoucherConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputInputVouchersVoucherConnectionEdgesVoucherEdge `json:"edges"`
}

// GetEdges returns getInputInputVouchersVoucherConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnection) GetEdges() []getInputInputVouchersVoucherConnectionEdgesVoucherEdge {
	return v.Edges
}

// getInputInputVouchersVoucherConnectionEdgesVoucherEdge includes the requested fields of the GraphQL type VoucherEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputInputVouchersVoucherConnectionEdgesVoucherEdge struct {
	// Node instance
	Node getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher `json:"node"`
}

// GetNode returns getInputInputVouchersVoucherConnectionEdgesVoucherEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdge) GetNode() getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher {
	return v.Node
}

// getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
	// Proof object that allows this voucher to be validated and executed on the base layer blockchain
	Proof getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof `json:"proof"`
}

// GetIndex returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Index, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetPayload() string {
	return v.Payload
}

// GetDestination returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetDestination() string {
	return v.Destination
}

// GetProof returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Proof, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetProof() getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof {
	return v.Proof
}

// getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof struct {
	// Validity proof for an output
	Validity getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Validity, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetValidity() getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Context, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetContext() string {
	return v.Context
}

// getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getInputNoticesInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputNoticesInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Get notices from this particular input with support for pagination
	Notices getInputNoticesInputNoticesNoticeConnection `json:"notices"`
}

// GetIndex returns getInputNoticesInput.Index, and is useful for accessing the field via an interface.
func (v *getInputNoticesInput) GetIndex() int { return v.Index }

// GetNotices returns getInputNoticesInput.Notices, and is useful for accessing the field via an interface.
func (v *getInputNoticesInput) GetNotices() getInputNoticesInputNoticesNoticeConnection {
	return v.Notices
}

// getInputNoticesInputNoticesNoticeConnection includes the requested fields of the GraphQL type NoticeConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputNoticesInputNoticesNoticeConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdge `json:"edges"`
}

// GetEdges returns getInputNoticesInputNoticesNoticeConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnection) GetEdges() []getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdge {
	return v.Edges
}

// getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdge includes the requested fields of the GraphQL type NoticeEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdge struct {
	// Node instance
	Node getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice `json:"node"`
}

// GetNode returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdge) GetNode() getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice {
	return v.Node
}

// getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Proof object that allows this notice to be validated by the base layer blockchain
	Proof getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof `json:"proof"`
}

// GetIndex returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Index, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetPayload() string {
	return v.Payload
}

// GetProof returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Proof, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetProof() getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof {
	return v.Proof
}

// getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof struct {
	// Validity proof for an output
	Validity getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Validity, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetValidity() getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Context, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetContext() string {
	return v.Context
}

// getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getInputNoticesInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getInputNoticesResponse is returned by getInputNotices on success.
type getInputNoticesResponse struct {
	// Get input based on its identifier
	Input getInputNoticesInput `json:"input"`
}

// GetInput returns getInputNoticesResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputNoticesResponse) GetInput() getInputNoticesInput { return v.Input }

// getInputReportsInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputReportsInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Get reports from this particular input with support for pagination
	Reports getInputReportsInputReportsReportConnection `json:"reports"`
}

// GetIndex returns getInputReportsInput.Index, and is useful for accessing the field via an interface.
func (v *getInputReportsInput) GetIndex() int { return v.Index }

// GetReports returns getInputReportsInput.Reports, and is useful for accessing the field via an interface.
func (v *getInputReportsInput) GetReports() getInputReportsInputReportsReportConnection {
	return v.Reports
}

// getInputReportsInputReportsReportConnection includes the requested fields of the GraphQL type ReportConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputReportsInputReportsReportConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputReportsInputReportsReportConnectionEdgesReportEdge `json:"edges"`
}

// GetEdges returns getInputReportsInputReportsReportConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputReportsInputReportsReportConnection) GetEdges() []getInputReportsInputReportsReportConnectionEdgesReportEdge {
	return v.Edges
}

// getInputReportsInputReportsReportConnectionEdgesReportEdge includes the requested fields of the GraphQL type ReportEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputReportsInputReportsReportConnectionEdgesReportEdge struct {
	// Node instance
	Node getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport `json:"node"`
}

// GetNode returns getInputReportsInputReportsReportConnectionEdgesReportEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputReportsInputReportsReportConnectionEdgesReportEdge) GetNode() getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport {
	return v.Node
}

// getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport.Index, and is useful for accessing the field via an interface.
func (v *getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport.Payload, and is useful for accessing the field via an interface.
func (v *getInputReportsInputReportsReportConnectionEdgesReportEdgeNodeReport) GetPayload() string {
	return v.Payload
}

// getInputReportsResponse is returned by getInputReports on success.
type getInputReportsResponse struct {
	// Get input based on its identifier
	Input getInputReportsInput `json:"input"`
}

// GetInput returns getInputReportsResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputReportsResponse) GetInput() getInputReportsInput { return v.Input }

// getInputResponse is returned by getInput on success.
type getInputResponse struct {
	// Get input based on its identifier
	Input getInputInput `json:"input"`
}

// GetInput returns getInputResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputResponse) GetInput() getInputInput { return v.Input }

// getInputVouchersInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputVouchersInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Get vouchers from this particular input with support for pagination
	Vouchers getInputVouchersInputVouchersVoucherConnection `json:"vouchers"`
}

// GetIndex returns getInputVouchersInput.Index, and is useful for accessing the field via an interface.
func (v *getInputVouchersInput) GetIndex() int { return v.Index }

// GetVouchers returns getInputVouchersInput.Vouchers, and is useful for accessing the field via an interface.
func (v *getInputVouchersInput) GetVouchers() getInputVouchersInputVouchersVoucherConnection {
	return v.Vouchers
}

// getInputVouchersInputVouchersVoucherConnection includes the requested fields of the GraphQL type VoucherConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputVouchersInputVouchersVoucherConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdge `json:"edges"`
}

// GetEdges returns getInputVouchersInputVouchersVoucherConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnection) GetEdges() []getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdge {
	return v.Edges
}

// getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdge includes the requested fields of the GraphQL type VoucherEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdge struct {
	// Node instance
	Node getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher `json:"node"`
}

// GetNode returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdge) GetNode() getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher {
	return v.Node
}

// getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
	// Proof object that allows this voucher to be validated and executed on the base layer blockchain
	Proof getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof `json:"proof"`
}

// GetIndex returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Index, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetPayload() string {
	return v.Payload
}

// GetDestination returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetDestination() string {
	return v.Destination
}

// GetProof returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Proof, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetProof() getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof {
	return v.Proof
}

// getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof struct {
	// Validity proof for an output
	Validity getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Validity, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetValidity() getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Context, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetContext() string {
	return v.Context
}

// getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getInputVouchersInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getInputVouchersResponse is returned by getInputVouchers on success.
type getInputVouchersResponse struct {
	// Get input based on its identifier
	Input getInputVouchersInput `json:"input"`
}

// GetInput returns getInputVouchersResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputVouchersResponse) GetInput() getInputVouchersInput { return v.Input }

// getInputsInputsInputConnection includes the requested fields of the GraphQL type InputConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputsInputsInputConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputsInputsInputConnectionEdgesInputEdge `json:"edges"`
}

// GetEdges returns getInputsInputsInputConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnection) GetEdges() []getInputsInputsInputConnectionEdgesInputEdge {
	return v.Edges
}

// getInputsInputsInputConnectionEdgesInputEdge includes the requested fields of the GraphQL type InputEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputsInputsInputConnectionEdgesInputEdge struct {
	// Node instance
	Node getInputsInputsInputConnectionEdgesInputEdgeNodeInput `json:"node"`
}

// GetNode returns getInputsInputsInputConnectionEdgesInputEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdge) GetNode() getInputsInputsInputConnectionEdgesInputEdgeNodeInput {
	return v.Node
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputsInputsInputConnectionEdgesInputEdgeNodeInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Status of the input
	Status CompletionStatus `json:"status"`
	// Address responsible for submitting the input
	MsgSender string `json:"msgSender"`
	// Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
	Timestamp string `json:"timestamp"`
	// Number of the base layer block in which the input was recorded
	BlockNumber string `json:"blockNumber"`
	// Input payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Get notices from this particular input with support for pagination
	Notices getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection `json:"notices"`
	// Get vouchers from this particular input with support for pagination
	Vouchers getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection `json:"vouchers"`
	// Get reports from this particular input with support for pagination
	Reports getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection `json:"reports"`
}

// GetIndex returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Index, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetIndex() int { return v.Index }

// GetStatus returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Status, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetStatus() CompletionStatus {
	return v.Status
}

// GetMsgSender returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.MsgSender, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetMsgSender() string {
	return v.MsgSender
}

// GetTimestamp returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Timestamp, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetTimestamp() string {
	return v.Timestamp
}

// GetBlockNumber returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.BlockNumber, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetBlockNumber() string {
	return v.BlockNumber
}

// GetPayload returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Payload, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetPayload() string { return v.Payload }

// GetNotices returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Notices, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetNotices() getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection {
	return v.Notices
}

// GetVouchers returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Vouchers, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetVouchers() getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection {
	return v.Vouchers
}

// GetReports returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Reports, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetReports() getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection {
	return v.Reports
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection includes the requested fields of the GraphQL type NoticeConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge `json:"edges"`
}

// GetEdges returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection) GetEdges() []getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge {
	return v.Edges
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge includes the requested fields of the GraphQL type NoticeEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge struct {
	// Node instance
	Node getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice `json:"node"`
}

// GetNode returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge) GetNode() getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice {
	return v.Node
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Proof object that allows this notice to be validated by the base layer blockchain
	Proof getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof `json:"proof"`
}

// GetIndex returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Index, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetPayload() string {
	return v.Payload
}

// GetProof returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Proof, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetProof() getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof {
	return v.Proof
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof struct {
	// Validity proof for an output
	Validity getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Validity, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetValidity() getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Context, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetContext() string {
	return v.Context
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection includes the requested fields of the GraphQL type ReportConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge `json:"edges"`
}

// GetEdges returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection) GetEdges() []getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge {
	return v.Edges
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge includes the requested fields of the GraphQL type ReportEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge struct {
	// Node instance
	Node getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport `json:"node"`
}

// GetNode returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge) GetNode() getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport {
	return v.Node
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport.Index, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport.Payload, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport) GetPayload() string {
	return v.Payload
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection includes the requested fields of the GraphQL type VoucherConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge `json:"edges"`
}

// GetEdges returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection) GetEdges() []getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge {
	return v.Edges
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge includes the requested fields of the GraphQL type VoucherEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge struct {
	// Node instance
	Node getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher `json:"node"`
}

// GetNode returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge) GetNode() getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher {
	return v.Node
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
	// Proof object that allows this voucher to be validated and executed on the base layer blockchain
	Proof getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof `json:"proof"`
}

// GetIndex returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Index, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetPayload() string {
	return v.Payload
}

// GetDestination returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetDestination() string {
	return v.Destination
}

// GetProof returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Proof, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetProof() getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof {
	return v.Proof
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof struct {
	// Validity proof for an output
	Validity getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Validity, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetValidity() getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Context, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetContext() string {
	return v.Context
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getInputsResponse is returned by getInputs on success.
type getInputsResponse struct {
	// Get inputs with support for pagination
	Inputs getInputsInputsInputConnection `json:"inputs"`
}

// GetInputs returns getInputsResponse.Inputs, and is useful for accessing the field via an interface.
func (v *getInputsResponse) GetInputs() getInputsInputsInputConnection { return v.Inputs }

// getNoticeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getNoticeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Proof object that allows this notice to be validated by the base layer blockchain
	Proof getNoticeNoticeProof `json:"proof"`
	// Input whose processing produced the notice
	Input getNoticeNoticeInput `json:"input"`
}

// GetIndex returns getNoticeNotice.Index, and is useful for accessing the field via an interface.
func (v *getNoticeNotice) GetIndex() int { return v.Index }

// GetPayload returns getNoticeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getNoticeNotice) GetPayload() string { return v.Payload }

// GetProof returns getNoticeNotice.Proof, and is useful for accessing the field via an interface.
func (v *getNoticeNotice) GetProof() getNoticeNoticeProof { return v.Proof }

// GetInput returns getNoticeNotice.Input, and is useful for accessing the field via an interface.
func (v *getNoticeNotice) GetInput() getNoticeNoticeInput { return v.Input }

// getNoticeNoticeInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getNoticeNoticeInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
}

// GetIndex returns getNoticeNoticeInput.Index, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeInput) GetIndex() int { return v.Index }

// getNoticeNoticeProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getNoticeNoticeProof struct {
	// Validity proof for an output
	Validity getNoticeNoticeProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getNoticeNoticeProof.Validity, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProof) GetValidity() getNoticeNoticeProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getNoticeNoticeProof.Context, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProof) GetContext() string { return v.Context }

// getNoticeNoticeProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getNoticeNoticeProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getNoticeNoticeProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getNoticeNoticeProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getNoticeNoticeProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getNoticeNoticeProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getNoticeNoticeProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getNoticeNoticeProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getNoticeNoticeProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getNoticeNoticeProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getNoticeNoticeProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getNoticeResponse is returned by getNotice on success.
type getNoticeResponse struct {
	// Get notice based on its index
	Notice getNoticeNotice `json:"notice"`
}

// GetNotice returns getNoticeResponse.Notice, and is useful for accessing the field via an interface.
func (v *getNoticeResponse) GetNotice() getNoticeNotice { return v.Notice }

// getNoticesNoticesNoticeConnection includes the requested fields of the GraphQL type NoticeConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getNoticesNoticesNoticeConnection struct {
	// Pagination entries returned for the current page
	Edges []getNoticesNoticesNoticeConnectionEdgesNoticeEdge `json:"edges"`
}

// GetEdges returns getNoticesNoticesNoticeConnection.Edges, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnection) GetEdges() []getNoticesNoticesNoticeConnectionEdgesNoticeEdge {
	return v.Edges
}

// getNoticesNoticesNoticeConnectionEdgesNoticeEdge includes the requested fields of the GraphQL type NoticeEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getNoticesNoticesNoticeConnectionEdgesNoticeEdge struct {
	// Node instance
	Node getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice `json:"node"`
}

// GetNode returns getNoticesNoticesNoticeConnectionEdgesNoticeEdge.Node, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdge) GetNode() getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice {
	return v.Node
}

// getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Proof object that allows this notice to be validated by the base layer blockchain
	Proof getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof `json:"proof"`
	// Input whose processing produced the notice
	Input getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeInput `json:"input"`
}

// GetIndex returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Index, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetIndex() int { return v.Index }

// GetPayload returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetPayload() string {
	return v.Payload
}

// GetProof returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Proof, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetProof() getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof {
	return v.Proof
}

// GetInput returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Input, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetInput() getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeInput {
	return v.Input
}

// getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
}

// GetIndex returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeInput.Index, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeInput) GetIndex() int {
	return v.Index
}

// getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof struct {
	// Validity proof for an output
	Validity getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Validity, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetValidity() getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof.Context, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProof) GetContext() string {
	return v.Context
}

// getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getNoticesNoticesNoticeConnectionEdgesNoticeEdgeNodeNoticeProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getNoticesResponse is returned by getNotices on success.
type getNoticesResponse struct {
	// Get notices with support for pagination
	Notices getNoticesNoticesNoticeConnection `json:"notices"`
}

// GetNotices returns getNoticesResponse.Notices, and is useful for accessing the field via an interface.
func (v *getNoticesResponse) GetNotices() getNoticesNoticesNoticeConnection { return v.Notices }

// getReportReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getReportReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Input whose processing produced the report
	Input getReportReportInput `json:"input"`
}

// GetIndex returns getReportReport.Index, and is useful for accessing the field via an interface.
func (v *getReportReport) GetIndex() int { return v.Index }

// GetPayload returns getReportReport.Payload, and is useful for accessing the field via an interface.
func (v *getReportReport) GetPayload() string { return v.Payload }

// GetInput returns getReportReport.Input, and is useful for accessing the field via an interface.
func (v *getReportReport) GetInput() getReportReportInput { return v.Input }

// getReportReportInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getReportReportInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
}

// GetIndex returns getReportReportInput.Index, and is useful for accessing the field via an interface.
func (v *getReportReportInput) GetIndex() int { return v.Index }

// getReportResponse is returned by getReport on success.
type getReportResponse struct {
	// Get report based on its index
	Report getReportReport `json:"report"`
}

// GetReport returns getReportResponse.Report, and is useful for accessing the field via an interface.
func (v *getReportResponse) GetReport() getReportReport { return v.Report }

// getReportsReportsReportConnection includes the requested fields of the GraphQL type ReportConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getReportsReportsReportConnection struct {
	// Pagination entries returned for the current page
	Edges []getReportsReportsReportConnectionEdgesReportEdge `json:"edges"`
}

// GetEdges returns getReportsReportsReportConnection.Edges, and is useful for accessing the field via an interface.
func (v *getReportsReportsReportConnection) GetEdges() []getReportsReportsReportConnectionEdgesReportEdge {
	return v.Edges
}

// getReportsReportsReportConnectionEdgesReportEdge includes the requested fields of the GraphQL type ReportEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getReportsReportsReportConnectionEdgesReportEdge struct {
	// Node instance
	Node getReportsReportsReportConnectionEdgesReportEdgeNodeReport `json:"node"`
}

// GetNode returns getReportsReportsReportConnectionEdgesReportEdge.Node, and is useful for accessing the field via an interface.
func (v *getReportsReportsReportConnectionEdgesReportEdge) GetNode() getReportsReportsReportConnectionEdgesReportEdgeNodeReport {
	return v.Node
}

// getReportsReportsReportConnectionEdgesReportEdgeNodeReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getReportsReportsReportConnectionEdgesReportEdgeNodeReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Input whose processing produced the report
	Input getReportsReportsReportConnectionEdgesReportEdgeNodeReportInput `json:"input"`
}

// GetIndex returns getReportsReportsReportConnectionEdgesReportEdgeNodeReport.Index, and is useful for accessing the field via an interface.
func (v *getReportsReportsReportConnectionEdgesReportEdgeNodeReport) GetIndex() int { return v.Index }

// GetPayload returns getReportsReportsReportConnectionEdgesReportEdgeNodeReport.Payload, and is useful for accessing the field via an interface.
func (v *getReportsReportsReportConnectionEdgesReportEdgeNodeReport) GetPayload() string {
	return v.Payload
}

// GetInput returns getReportsReportsReportConnectionEdgesReportEdgeNodeReport.Input, and is useful for accessing the field via an interface.
func (v *getReportsReportsReportConnectionEdgesReportEdgeNodeReport) GetInput() getReportsReportsReportConnectionEdgesReportEdgeNodeReportInput {
	return v.Input
}

// getReportsReportsReportConnectionEdgesReportEdgeNodeReportInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getReportsReportsReportConnectionEdgesReportEdgeNodeReportInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
}

// GetIndex returns getReportsReportsReportConnectionEdgesReportEdgeNodeReportInput.Index, and is useful for accessing the field via an interface.
func (v *getReportsReportsReportConnectionEdgesReportEdgeNodeReportInput) GetIndex() int {
	return v.Index
}

// getReportsResponse is returned by getReports on success.
type getReportsResponse struct {
	// Get reports with support for pagination
	Reports getReportsReportsReportConnection `json:"reports"`
}

// GetReports returns getReportsResponse.Reports, and is useful for accessing the field via an interface.
func (v *getReportsResponse) GetReports() getReportsReportsReportConnection { return v.Reports }

// getVoucherResponse is returned by getVoucher on success.
type getVoucherResponse struct {
	// Get voucher based on its index
	Voucher getVoucherVoucher `json:"voucher"`
}

// GetVoucher returns getVoucherResponse.Voucher, and is useful for accessing the field via an interface.
func (v *getVoucherResponse) GetVoucher() getVoucherVoucher { return v.Voucher }

// getVoucherVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getVoucherVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
	// Proof object that allows this voucher to be validated and executed on the base layer blockchain
	Proof getVoucherVoucherProof `json:"proof"`
	// Input whose processing produced the voucher
	Input getVoucherVoucherInput `json:"input"`
}

// GetIndex returns getVoucherVoucher.Index, and is useful for accessing the field via an interface.
func (v *getVoucherVoucher) GetIndex() int { return v.Index }

// GetPayload returns getVoucherVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getVoucherVoucher) GetPayload() string { return v.Payload }

// GetDestination returns getVoucherVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getVoucherVoucher) GetDestination() string { return v.Destination }

// GetProof returns getVoucherVoucher.Proof, and is useful for accessing the field via an interface.
func (v *getVoucherVoucher) GetProof() getVoucherVoucherProof { return v.Proof }

// GetInput returns getVoucherVoucher.Input, and is useful for accessing the field via an interface.
func (v *getVoucherVoucher) GetInput() getVoucherVoucherInput { return v.Input }

// getVoucherVoucherInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getVoucherVoucherInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
}

// GetIndex returns getVoucherVoucherInput.Index, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherInput) GetIndex() int { return v.Index }

// getVoucherVoucherProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getVoucherVoucherProof struct {
	// Validity proof for an output
	Validity getVoucherVoucherProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getVoucherVoucherProof.Validity, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProof) GetValidity() getVoucherVoucherProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getVoucherVoucherProof.Context, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProof) GetContext() string { return v.Context }

// getVoucherVoucherProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getVoucherVoucherProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getVoucherVoucherProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getVoucherVoucherProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getVoucherVoucherProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getVoucherVoucherProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getVoucherVoucherProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getVoucherVoucherProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getVoucherVoucherProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getVoucherVoucherProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getVoucherVoucherProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// getVouchersResponse is returned by getVouchers on success.
type getVouchersResponse struct {
	// Get vouchers with support for pagination
	Vouchers getVouchersVouchersVoucherConnection `json:"vouchers"`
}

// GetVouchers returns getVouchersResponse.Vouchers, and is useful for accessing the field via an interface.
func (v *getVouchersResponse) GetVouchers() getVouchersVouchersVoucherConnection { return v.Vouchers }

// getVouchersVouchersVoucherConnection includes the requested fields of the GraphQL type VoucherConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getVouchersVouchersVoucherConnection struct {
	// Pagination entries returned for the current page
	Edges []getVouchersVouchersVoucherConnectionEdgesVoucherEdge `json:"edges"`
}

// GetEdges returns getVouchersVouchersVoucherConnection.Edges, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnection) GetEdges() []getVouchersVouchersVoucherConnectionEdgesVoucherEdge {
	return v.Edges
}

// getVouchersVouchersVoucherConnectionEdgesVoucherEdge includes the requested fields of the GraphQL type VoucherEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getVouchersVouchersVoucherConnectionEdgesVoucherEdge struct {
	// Node instance
	Node getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher `json:"node"`
}

// GetNode returns getVouchersVouchersVoucherConnectionEdgesVoucherEdge.Node, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdge) GetNode() getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher {
	return v.Node
}

// getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
	// Proof object that allows this voucher to be validated and executed on the base layer blockchain
	Proof getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof `json:"proof"`
	// Input whose processing produced the voucher
	Input getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherInput `json:"input"`
}

// GetIndex returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Index, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetIndex() int {
	return v.Index
}

// GetPayload returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetPayload() string {
	return v.Payload
}

// GetDestination returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetDestination() string {
	return v.Destination
}

// GetProof returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Proof, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetProof() getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof {
	return v.Proof
}

// GetInput returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Input, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetInput() getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherInput {
	return v.Input
}

// getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
}

// GetIndex returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherInput.Index, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherInput) GetIndex() int {
	return v.Index
}

// getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof includes the requested fields of the GraphQL type Proof.
// The GraphQL type's documentation follows.
//
// Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
type getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof struct {
	// Validity proof for an output
	Validity getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof `json:"validity"`
	// Data that allows the validity proof to be contextualized within submitted claims, given as a payload in Ethereum hex binary format, starting with '0x'
	Context string `json:"context"`
}

// GetValidity returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Validity, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetValidity() getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof {
	return v.Validity
}

// GetContext returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof.Context, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProof) GetContext() string {
	return v.Context
}

// getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof includes the requested fields of the GraphQL type OutputValidityProof.
// The GraphQL type's documentation follows.
//
// Validity proof for an output
type getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof struct {
	// Local input index within the context of the related epoch
	InputIndexWithinEpoch int `json:"inputIndexWithinEpoch"`
	// Output index within the context of the input that produced it
	OutputIndexWithinInput int `json:"outputIndexWithinInput"`
	// Merkle root of all output hashes of the related input, given in Ethereum hex binary format (32 bytes), starting with '0x'
	OutputHashesRootHash string `json:"outputHashesRootHash"`
	// Merkle root of all voucher hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	VouchersEpochRootHash string `json:"vouchersEpochRootHash"`
	// Merkle root of all notice hashes of the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	NoticesEpochRootHash string `json:"noticesEpochRootHash"`
	// Hash of the machine state claimed for the related epoch, given in Ethereum hex binary format (32 bytes), starting with '0x'
	MachineStateHash string `json:"machineStateHash"`
	// Proof that this output hash is in the output-hashes merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashInOutputHashesSiblings []string `json:"outputHashInOutputHashesSiblings"`
	// Proof that this output-hashes root hash is in epoch's output merkle tree. This array of siblings is bottom-up ordered (from the leaf to the root). Each hash is given in Ethereum hex binary format (32 bytes), starting with '0x'.
	OutputHashesInEpochSiblings []string `json:"outputHashesInEpochSiblings"`
}

// GetInputIndexWithinEpoch returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.InputIndexWithinEpoch, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetInputIndexWithinEpoch() int {
	return v.InputIndexWithinEpoch
}

// GetOutputIndexWithinInput returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputIndexWithinInput, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputIndexWithinInput() int {
	return v.OutputIndexWithinInput
}

// GetOutputHashesRootHash returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesRootHash, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesRootHash() string {
	return v.OutputHashesRootHash
}

// GetVouchersEpochRootHash returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.VouchersEpochRootHash, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetVouchersEpochRootHash() string {
	return v.VouchersEpochRootHash
}

// GetNoticesEpochRootHash returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.NoticesEpochRootHash, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetNoticesEpochRootHash() string {
	return v.NoticesEpochRootHash
}

// GetMachineStateHash returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.MachineStateHash, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetMachineStateHash() string {
	return v.MachineStateHash
}

// GetOutputHashInOutputHashesSiblings returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashInOutputHashesSiblings, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashInOutputHashesSiblings() []string {
	return v.OutputHashInOutputHashesSiblings
}

// GetOutputHashesInEpochSiblings returns getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof.OutputHashesInEpochSiblings, and is useful for accessing the field via an interface.
func (v *getVouchersVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucherProofValidityOutputValidityProof) GetOutputHashesInEpochSiblings() []string {
	return v.OutputHashesInEpochSiblings
}

// The query or mutation executed by getInput.
const getInput_Operation = `
query getInput ($index: Int!) {
	input(index: $index) {
		index
		status
		msgSender
		timestamp
		blockNumber
		payload
		notices {
			edges {
				node {
					index
					payload
					proof {
						validity {
							inputIndexWithinEpoch
							outputIndexWithinInput
							outputHashesRootHash
							vouchersEpochRootHash
							noticesEpochRootHash
							machineStateHash
							outputHashInOutputHashesSiblings
							outputHashesInEpochSiblings
						}
						context
					}
				}
			}
		}
		vouchers {
			edges {
				node {
					index
					payload
					destination
					proof {
						validity {
							inputIndexWithinEpoch
							outputIndexWithinInput
							outputHashesRootHash
							vouchersEpochRootHash
							noticesEpochRootHash
							machineStateHash
							outputHashInOutputHashesSiblings
							outputHashesInEpochSiblings
						}
						context
					}
				}
			}
		}
		reports {
			edges {
				node {
					index
					payload
				}
			}
		}
	}
}
`

func getInput(
	ctx context.Context,
	client graphql.Client,
	index int,
) (*getInputResponse, error) {
	req := &graphql.Request{
		OpName: "getInput",
		Query:  getInput_Operation,
		Variables: &__getInputInput{
			Index: index,
		},
	}
	var err error

	var data getInputResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInputNotices.
const getInputNotices_Operation = `
query getInputNotices ($inputIndex: Int!) {
	input(index: $inputIndex) {
		index
		notices {
			edges {
				node {
					index
					payload
					proof {
						validity {
							inputIndexWithinEpoch
							outputIndexWithinInput
							outputHashesRootHash
							vouchersEpochRootHash
							noticesEpochRootHash
							machineStateHash
							outputHashInOutputHashesSiblings
							outputHashesInEpochSiblings
						}
						context
					}
				}
			}
		}
	}
}
`

func getInputNotices(
	ctx context.Context,
	client graphql.Client,
	inputIndex int,
) (*getInputNoticesResponse, error) {
	req := &graphql.Request{
		OpName: "getInputNotices",
		Query:  getInputNotices_Operation,
		Variables: &__getInputNoticesInput{
			InputIndex: inputIndex,
		},
	}
	var err error

	var data getInputNoticesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInputReports.
const getInputReports_Operation = `
query getInputReports ($inputIndex: Int!) {
	input(index: $inputIndex) {
		index
		reports {
			edges {
				node {
					index
					payload
				}
			}
		}
	}
}
`

func getInputReports(
	ctx context.Context,
	client graphql.Client,
	inputIndex int,
) (*getInputReportsResponse, error) {
	req := &graphql.Request{
		OpName: "getInputReports",
		Query:  getInputReports_Operation,
		Variables: &__getInputReportsInput{
			InputIndex: inputIndex,
		},
	}
	var err error

	var data getInputReportsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInputVouchers.
const getInputVouchers_Operation = `
query getInputVouchers ($inputIndex: Int!) {
	input(index: $inputIndex) {
		index
		vouchers {
			edges {
				node {
					index
					payload
					destination
					proof {
						validity {
							inputIndexWithinEpoch
							outputIndexWithinInput
							outputHashesRootHash
							vouchersEpochRootHash
							noticesEpochRootHash
							machineStateHash
							outputHashInOutputHashesSiblings
							outputHashesInEpochSiblings
						}
						context
					}
				}
			}
		}
	}
}
`

func getInputVouchers(
	ctx context.Context,
	client graphql.Client,
	inputIndex int,
) (*getInputVouchersResponse, error) {
	req := &graphql.Request{
		OpName: "getInputVouchers",
		Query:  getInputVouchers_Operation,
		Variables: &__getInputVouchersInput{
			InputIndex: inputIndex,
		},
	}
	var err error

	var data getInputVouchersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInputs.
const getInputs_Operation = `
query getInputs {
	inputs {
		edges {
			node {
				index
				status
				msgSender
				timestamp
				blockNumber
				payload
				notices {
					edges {
						node {
							index
							payload
							proof {
								validity {
									inputIndexWithinEpoch
									outputIndexWithinInput
									outputHashesRootHash
									vouchersEpochRootHash
									noticesEpochRootHash
									machineStateHash
									outputHashInOutputHashesSiblings
									outputHashesInEpochSiblings
								}
								context
							}
						}
					}
				}
				vouchers {
					edges {
						node {
							index
							payload
							destination
							proof {
								validity {
									inputIndexWithinEpoch
									outputIndexWithinInput
									outputHashesRootHash
									vouchersEpochRootHash
									noticesEpochRootHash
									machineStateHash
									outputHashInOutputHashesSiblings
									outputHashesInEpochSiblings
								}
								context
							}
						}
					}
				}
				reports {
					edges {
						node {
							index
							payload
						}
					}
				}
			}
		}
	}
}
`

func getInputs(
	ctx context.Context,
	client graphql.Client,
) (*getInputsResponse, error) {
	req := &graphql.Request{
		OpName: "getInputs",
		Query:  getInputs_Operation,
	}
	var err error

	var data getInputsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getNotice.
const getNotice_Operation = `
query getNotice ($noticeIndex: Int!, $inputIndex: Int!) {
	notice(noticeIndex: $noticeIndex, inputIndex: $inputIndex) {
		index
		payload
		proof {
			validity {
				inputIndexWithinEpoch
				outputIndexWithinInput
				outputHashesRootHash
				vouchersEpochRootHash
				noticesEpochRootHash
				machineStateHash
				outputHashInOutputHashesSiblings
				outputHashesInEpochSiblings
			}
			context
		}
		input {
			index
		}
	}
}
`

func getNotice(
	ctx context.Context,
	client graphql.Client,
	noticeIndex int,
	inputIndex int,
) (*getNoticeResponse, error) {
	req := &graphql.Request{
		OpName: "getNotice",
		Query:  getNotice_Operation,
		Variables: &__getNoticeInput{
			NoticeIndex: noticeIndex,
			InputIndex:  inputIndex,
		},
	}
	var err error

	var data getNoticeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getNotices.
const getNotices_Operation = `
query getNotices {
	notices {
		edges {
			node {
				index
				payload
				proof {
					validity {
						inputIndexWithinEpoch
						outputIndexWithinInput
						outputHashesRootHash
						vouchersEpochRootHash
						noticesEpochRootHash
						machineStateHash
						outputHashInOutputHashesSiblings
						outputHashesInEpochSiblings
					}
					context
				}
				input {
					index
				}
			}
		}
	}
}
`

func getNotices(
	ctx context.Context,
	client graphql.Client,
) (*getNoticesResponse, error) {
	req := &graphql.Request{
		OpName: "getNotices",
		Query:  getNotices_Operation,
	}
	var err error

	var data getNoticesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getReport.
const getReport_Operation = `
query getReport ($reportIndex: Int!, $inputIndex: Int!) {
	report(reportIndex: $reportIndex, inputIndex: $inputIndex) {
		index
		payload
		input {
			index
		}
	}
}
`

func getReport(
	ctx context.Context,
	client graphql.Client,
	reportIndex int,
	inputIndex int,
) (*getReportResponse, error) {
	req := &graphql.Request{
		OpName: "getReport",
		Query:  getReport_Operation,
		Variables: &__getReportInput{
			ReportIndex: reportIndex,
			InputIndex:  inputIndex,
		},
	}
	var err error

	var data getReportResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getReports.
const getReports_Operation = `
query getReports {
	reports {
		edges {
			node {
				index
				payload
				input {
					index
				}
			}
		}
	}
}
`

func getReports(
	ctx context.Context,
	client graphql.Client,
) (*getReportsResponse, error) {
	req := &graphql.Request{
		OpName: "getReports",
		Query:  getReports_Operation,
	}
	var err error

	var data getReportsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getVoucher.
const getVoucher_Operation = `
query getVoucher ($voucherIndex: Int!, $inputIndex: Int!) {
	voucher(voucherIndex: $voucherIndex, inputIndex: $inputIndex) {
		index
		payload
		destination
		proof {
			validity {
				inputIndexWithinEpoch
				outputIndexWithinInput
				outputHashesRootHash
				vouchersEpochRootHash
				noticesEpochRootHash
				machineStateHash
				outputHashInOutputHashesSiblings
				outputHashesInEpochSiblings
			}
			context
		}
		input {
			index
		}
	}
}
`

func getVoucher(
	ctx context.Context,
	client graphql.Client,
	voucherIndex int,
	inputIndex int,
) (*getVoucherResponse, error) {
	req := &graphql.Request{
		OpName: "getVoucher",
		Query:  getVoucher_Operation,
		Variables: &__getVoucherInput{
			VoucherIndex: voucherIndex,
			InputIndex:   inputIndex,
		},
	}
	var err error

	var data getVoucherResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getVouchers.
const getVouchers_Operation = `
query getVouchers {
	vouchers {
		edges {
			node {
				index
				payload
				destination
				proof {
					validity {
						inputIndexWithinEpoch
						outputIndexWithinInput
						outputHashesRootHash
						vouchersEpochRootHash
						noticesEpochRootHash
						machineStateHash
						outputHashInOutputHashesSiblings
						outputHashesInEpochSiblings
					}
					context
				}
				input {
					index
				}
			}
		}
	}
}
`

func getVouchers(
	ctx context.Context,
	client graphql.Client,
) (*getVouchersResponse, error) {
	req := &graphql.Request{
		OpName: "getVouchers",
		Query:  getVouchers_Operation,
	}
	var err error

	var data getVouchersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
