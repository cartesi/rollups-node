// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package readerclient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type CompletionStatus string

const (
	CompletionStatusUnprocessed                CompletionStatus = "UNPROCESSED"
	CompletionStatusAccepted                   CompletionStatus = "ACCEPTED"
	CompletionStatusRejected                   CompletionStatus = "REJECTED"
	CompletionStatusException                  CompletionStatus = "EXCEPTION"
	CompletionStatusMachineHalted              CompletionStatus = "MACHINE_HALTED"
	CompletionStatusCycleLimitExceeded         CompletionStatus = "CYCLE_LIMIT_EXCEEDED"
	CompletionStatusTimeLimitExceeded          CompletionStatus = "TIME_LIMIT_EXCEEDED"
	CompletionStatusPayloadLengthLimitExceeded CompletionStatus = "PAYLOAD_LENGTH_LIMIT_EXCEEDED"
)

// __getInputInput is used internally by genqlient
type __getInputInput struct {
	Index int `json:"index"`
}

// GetIndex returns __getInputInput.Index, and is useful for accessing the field via an interface.
func (v *__getInputInput) GetIndex() int { return v.Index }

// __getInputsInput is used internally by genqlient
type __getInputsInput struct {
	First int `json:"first"`
}

// GetFirst returns __getInputsInput.First, and is useful for accessing the field via an interface.
func (v *__getInputsInput) GetFirst() int { return v.First }

// getInputInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Status of the input
	Status CompletionStatus `json:"status"`
	// Address responsible for submitting the input
	MsgSender string `json:"msgSender"`
	// Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
	Timestamp string `json:"timestamp"`
	// Number of the base layer block in which the input was recorded
	BlockNumber string `json:"blockNumber"`
	// Input payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputInput.Index, and is useful for accessing the field via an interface.
func (v *getInputInput) GetIndex() int { return v.Index }

// GetStatus returns getInputInput.Status, and is useful for accessing the field via an interface.
func (v *getInputInput) GetStatus() CompletionStatus { return v.Status }

// GetMsgSender returns getInputInput.MsgSender, and is useful for accessing the field via an interface.
func (v *getInputInput) GetMsgSender() string { return v.MsgSender }

// GetTimestamp returns getInputInput.Timestamp, and is useful for accessing the field via an interface.
func (v *getInputInput) GetTimestamp() string { return v.Timestamp }

// GetBlockNumber returns getInputInput.BlockNumber, and is useful for accessing the field via an interface.
func (v *getInputInput) GetBlockNumber() string { return v.BlockNumber }

// GetPayload returns getInputInput.Payload, and is useful for accessing the field via an interface.
func (v *getInputInput) GetPayload() string { return v.Payload }

// getInputResponse is returned by getInput on success.
type getInputResponse struct {
	// Get input based on its identifier
	Input getInputInput `json:"input"`
}

// GetInput returns getInputResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputResponse) GetInput() getInputInput { return v.Input }

// getInputsInputsInputConnection includes the requested fields of the GraphQL type InputConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputsInputsInputConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputsInputsInputConnectionEdgesInputEdge `json:"edges"`
}

// GetEdges returns getInputsInputsInputConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnection) GetEdges() []getInputsInputsInputConnectionEdgesInputEdge {
	return v.Edges
}

// getInputsInputsInputConnectionEdgesInputEdge includes the requested fields of the GraphQL type InputEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputsInputsInputConnectionEdgesInputEdge struct {
	// Node instance
	Node getInputsInputsInputConnectionEdgesInputEdgeNodeInput `json:"node"`
}

// GetNode returns getInputsInputsInputConnectionEdgesInputEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdge) GetNode() getInputsInputsInputConnectionEdgesInputEdgeNodeInput {
	return v.Node
}

// getInputsInputsInputConnectionEdgesInputEdgeNodeInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputsInputsInputConnectionEdgesInputEdgeNodeInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Status of the input
	Status CompletionStatus `json:"status"`
	// Address responsible for submitting the input
	MsgSender string `json:"msgSender"`
	// Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
	Timestamp string `json:"timestamp"`
	// Number of the base layer block in which the input was recorded
	BlockNumber string `json:"blockNumber"`
	// Input payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Index, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetIndex() int { return v.Index }

// GetStatus returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Status, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetStatus() CompletionStatus {
	return v.Status
}

// GetMsgSender returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.MsgSender, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetMsgSender() string {
	return v.MsgSender
}

// GetTimestamp returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Timestamp, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetTimestamp() string {
	return v.Timestamp
}

// GetBlockNumber returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.BlockNumber, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetBlockNumber() string {
	return v.BlockNumber
}

// GetPayload returns getInputsInputsInputConnectionEdgesInputEdgeNodeInput.Payload, and is useful for accessing the field via an interface.
func (v *getInputsInputsInputConnectionEdgesInputEdgeNodeInput) GetPayload() string { return v.Payload }

// getInputsResponse is returned by getInputs on success.
type getInputsResponse struct {
	// Get inputs with support for pagination
	Inputs getInputsInputsInputConnection `json:"inputs"`
}

// GetInputs returns getInputsResponse.Inputs, and is useful for accessing the field via an interface.
func (v *getInputsResponse) GetInputs() getInputsInputsInputConnection { return v.Inputs }

// The query or mutation executed by getInput.
const getInput_Operation = `
query getInput ($index: Int!) {
	input(index: $index) {
		index
		status
		msgSender
		timestamp
		blockNumber
		payload
	}
}
`

func getInput(
	ctx context.Context,
	client graphql.Client,
	index int,
) (*getInputResponse, error) {
	req := &graphql.Request{
		OpName: "getInput",
		Query:  getInput_Operation,
		Variables: &__getInputInput{
			Index: index,
		},
	}
	var err error

	var data getInputResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getInputs.
const getInputs_Operation = `
query getInputs ($first: Int!) {
	inputs(first: $first) {
		edges {
			node {
				index
				status
				msgSender
				timestamp
				blockNumber
				payload
			}
		}
	}
}
`

func getInputs(
	ctx context.Context,
	client graphql.Client,
	first int,
) (*getInputsResponse, error) {
	req := &graphql.Request{
		OpName: "getInputs",
		Query:  getInputs_Operation,
		Variables: &__getInputsInput{
			First: first,
		},
	}
	var err error

	var data getInputsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
