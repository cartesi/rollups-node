version: "3.9"

name: rollups-node
services:
  node:
    image: "cartesi/rollups-node:devel"
    build:
      context: ..
      dockerfile: build/Dockerfile
      tags:
        - "cartesi/rollups-node:devel"
    entrypoint: ["cartesi-rollups-node", "validator"]
    ports:
      - "4000:4000"
      - "5005:5005"
    depends_on:
      hardhat:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
      hardhat_set_interval:
        condition: service_completed_successfully
      server_manager:
        condition: service_healthy
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      RUST_LOG: info
      CARTESI_LOG_LEVEL: info
      POSTGRES_ENDPOINT: postgres://postgres:password@database:5432/postgres
      CHAIN_ID: 31337 # dispacher + indexer

      #Advance Runner
      SERVER_MANAGER_ENDPOINT: http://server_manager:5001
      PROVIDER_HTTP_ENDPOINT: http://hardhat:8545
      SESSION_ID: default_rollups_id
      SNAPSHOT_DIR: /var/opt/cartesi/machine-snapshots
      SNAPSHOT_LATEST: /var/opt/cartesi/machine-snapshots/latest

      #Authority Claimer
      AUTHORITY_CLAIMER_HTTP_SERVER_PORT: 8085
      TX_PROVIDER_HTTP_ENDPOINT: http://hardhat:8545
      TX_CHAIN_ID: 31337
      TX_CHAIN_IS_LEGACY: ${TX_LEGACY:-false}
      TX_DEFAULT_CONFIRMATIONS: 2
      TX_SIGNING_MNEMONIC: "test test test test test test test test test test test junk"

      #Dispatcher
      DISPATCHER_HTTP_SERVER_PORT: 8081
      DAPP_DEPLOYMENT_FILE: /deployments/localhost/dapp.json
      ROLLUPS_DEPLOYMENT_FILE: /opt/cartesi/share/deployments/localhost.json
      RD_EPOCH_DURATION: 86400
      SC_GRPC_ENDPOINT: http://0.0.0.0:50051
      SC_DEFAULT_CONFIRMATIONS: 1

      #GraphQL Server
      GRAPHQL_HEALTHCHECK_PORT: 8082
      GRAPHQL_HOST: "0.0.0.0"
      GRAPHQL_PORT: "4000"

      #Indexer
      INDEXER_HEALTHCHECK_PORT: 8083
      DAPP_CONTRACT_ADDRESS_FILE: /deployments/localhost/dapp.json
      REDIS_ENDPOINT: redis://redis:6379

      #Inspect Server
      INSPECT_SERVER_HEALTHCHECK_PORT: 8084
      INSPECT_SERVER_ADDRESS: 0.0.0.0:5005
      SERVER_MANAGER_ADDRESS: server_manager:5001

      #State Server
      SS_SERVER_ADDRESS: 0.0.0.0:50051
      SF_GENESIS_BLOCK: 0x1
      SF_SAFETY_MARGIN: 1
      BH_HTTP_ENDPOINT: http://hardhat:8545
      BH_WS_ENDPOINT: ws://hardhat:8545
      BH_BLOCK_TIMEOUT: 8

    volumes:
      - machine:/var/opt/cartesi/machine-snapshots
      - blockchain-data:/opt/cartesi/share/deployments:ro
      - ./deployments:/deployments:ro

  hardhat:
    image: cartesi/rollups-hardhat:1.0.0
    command:
      [
        "node",
        "--network",
        "hardhat",
        "--export",
        "/opt/cartesi/share/deployments/localhost.json",
      ]
    init: true
    ports:
      - "8545:8545"
    healthcheck:
      test:
        ["CMD", "test", "-f", "/opt/cartesi/share/deployments/localhost.json"]
      interval: 30s
      timeout: 30s
      retries: 5
    volumes:
      - blockchain-data:/opt/cartesi/share/deployments
      - ./deployments:/app/rollups/deployments

  deployer:
    image: cartesi/rollups-cli:1.0.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      server_manager:
        condition: service_healthy
    command:
      [
        "create",
        "--rpc",
        "http://hardhat:8545",
        "--deploymentFile",
        "/opt/cartesi/share/deployments/localhost.json",
        "--mnemonic",
        "test test test test test test test test test test test junk",
        "--templateHashFile",
        "/var/opt/cartesi/machine-snapshots/0_0/hash",
        "--outputFile",
        "/deployments/localhost/dapp.json",
      ]
    volumes:
      - blockchain-data:/opt/cartesi/share/deployments:ro
      - machine:/var/opt/cartesi/machine-snapshots:ro
      - ./deployments:/deployments

  hardhat_stop_automine:
    image: curlimages/curl:7.84.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      deployer:
        condition: service_completed_successfully
    command:
      [
        "--data",
        '{"id":1337,"jsonrpc":"2.0","method":"evm_setAutomine","params":[false]}',
        "http://hardhat:8545",
      ]

  hardhat_set_interval:
    image: curlimages/curl:7.84.0
    restart: on-failure
    depends_on:
      hardhat:
        condition: service_healthy
      hardhat_stop_automine:
        condition: service_completed_successfully
    command:
      [
        "--data",
        '{"id":1337,"jsonrpc":"2.0","method":"evm_setIntervalMining","params":[5000]}',
        "http://hardhat:8545",
      ]

  server_manager:
    build:
      context: ..
      dockerfile: build/machine.Dockerfile
    restart: always
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD-SHELL", 'bash -c ''echo "" > /dev/tcp/127.0.0.1/5001;''']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - machine:/var/opt/cartesi/machine-snapshots
    environment:
      - SERVER_MANAGER_LOG_LEVEL=warning
      - REMOTE_CARTESI_MACHINE_LOG_LEVEL=info

  database:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=password
    volumes:
      - database-data:/var/lib/postgresql/data

  redis:
    image: redis:6-alpine
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data

volumes:
  blockchain-data: {}
  machine: {}
  database-data: {}
  redis-data: {}
