// Code generated by internal/node/config/generate.
// DO NOT EDIT.

// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

package config

import (
	"fmt"
	"log/slog"
	"os"
	"strconv"
	"time"
)

type (
	Duration = time.Duration
	LogLevel = slog.Level
)

// ------------------------------------------------------------------------------------------------
// Auth Kind
// ------------------------------------------------------------------------------------------------

type AuthKind uint8

const (
	AuthKindPrivateKeyVar AuthKind = iota
	AuthKindPrivateKeyFile
	AuthKindMnemonicVar
	AuthKindMnemonicFile
	AuthKindAWS
)

// ------------------------------------------------------------------------------------------------
// Parsing functions
// ------------------------------------------------------------------------------------------------

func toInt64FromString(s string) (int64, error) {
	return strconv.ParseInt(s, 10, 64)
}

func toUint64FromString(s string) (uint64, error) {
       value, err := strconv.ParseUint(s, 10, 64)
       return value, err
}

func toStringFromString(s string) (string, error) {
	return s, nil
}

func toDurationFromSeconds(s string) (time.Duration, error) {
	return time.ParseDuration(s + "s")
}

func toLogLevelFromString(s string) (LogLevel, error) {
	var m = map[string]LogLevel{
		"debug": slog.LevelDebug,
		"info":  slog.LevelInfo,
		"warn":  slog.LevelWarn,
		"error": slog.LevelError,
	}
	if v, ok := m[s]; ok {
		return v, nil
	} else {
		var zeroValue LogLevel
		return zeroValue, fmt.Errorf("invalid log level '%s'", s)
	}
}

func toAuthKindFromString(s string) (AuthKind, error) {
	var m = map[string]AuthKind{
		"private_key":      AuthKindPrivateKeyVar,
		"private_key_file": AuthKindPrivateKeyFile,
		"mnemonic":         AuthKindMnemonicVar,
		"mnemonic_file":    AuthKindMnemonicFile,
		"aws":              AuthKindAWS,
	}
	if v, ok := m[s]; ok {
		return v, nil
	} else {
		var zeroValue AuthKind
		return zeroValue, fmt.Errorf("invalid auth kind '%s'", s)
	}
}

// Aliases to be used by the generated functions.
var (
	toBool     = strconv.ParseBool
	toInt      = strconv.Atoi
	toInt64    = toInt64FromString
	toUint64   = toUint64FromString
	toString   = toStringFromString
	toDuration = toDurationFromSeconds
	toLogLevel = toLogLevelFromString
	toAuthKind = toAuthKindFromString
)

// ------------------------------------------------------------------------------------------------
// Getters
// ------------------------------------------------------------------------------------------------

{{range .}}
func get{{toFunctionName .Name}}() {{.GoType}} {
	s, ok := os.LookupEnv("{{.Name}}")
	if !ok {
		{{- if .Default}}
		s = "{{.Default}}"
		{{- else}}
		panic("missing env var {{.Name}}")
		{{- end}}
	}
	val, err := {{toGoFunc .GoType}}(s)
	if err != nil {
		panic(fmt.Sprintf("failed to parse {{.Name}}: %v", err))
	}
	return val
}
{{end}}