// Code generated by internal/config/generate.
// DO NOT EDIT.

// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

package config

import (
	"time"
)

type (
	Duration = time.Duration
)

func getCartesiAuthAwsKmsKeyId() (string, bool) {
	v, ok := getOptional("CARTESI_AUTH_AWS_KMS_KEY_ID", "", false, true, toString)
	return v, ok
}

func getCartesiAuthAwsKmsRegion() (string, bool) {
	v, ok := getOptional("CARTESI_AUTH_AWS_KMS_REGION", "", false, true, toString)
	return v, ok
}

func getCartesiAuthMnemonic() (string, bool) {
	v, ok := getOptional("CARTESI_AUTH_MNEMONIC", "", false, true, toString)
	return v, ok
}

func getCartesiAuthMnemonicAccountIndex() (int, bool) {
	v, ok := getOptional("CARTESI_AUTH_MNEMONIC_ACCOUNT_INDEX", "0", true, true, toInt)
	return v, ok
}

func getCartesiAuthMnemonicFile() (string, bool) {
	v, ok := getOptional("CARTESI_AUTH_MNEMONIC_FILE", "", false, true, toString)
	return v, ok
}

func getCartesiBlockchainBlockTimeout() int {
	v := get("CARTESI_BLOCKCHAIN_BLOCK_TIMEOUT", "60", true, false, toInt)
	return v
}

func getCartesiBlockchainFinalityOffset() int {
	v := get("CARTESI_BLOCKCHAIN_FINALITY_OFFSET", "10", true, false, toInt)
	return v
}

func getCartesiBlockchainHttpEndpoint() string {
	v := get("CARTESI_BLOCKCHAIN_HTTP_ENDPOINT", "", false, false, toString)
	return v
}

func getCartesiBlockchainId() int {
	v := get("CARTESI_BLOCKCHAIN_ID", "", false, false, toInt)
	return v
}

func getCartesiBlockchainIsLegacy() bool {
	v := get("CARTESI_BLOCKCHAIN_IS_LEGACY", "false", true, false, toBool)
	return v
}

func getCartesiBlockchainWsEndpoint() string {
	v := get("CARTESI_BLOCKCHAIN_WS_ENDPOINT", "", false, false, toString)
	return v
}

func getCartesiContractsInputBoxDeploymentBlockNumber() int64 {
	v := get("CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER", "", false, false, toInt64)
	return v
}

func getCartesiContractsApplicationAddress() string {
	v := get("CARTESI_CONTRACTS_APPLICATION_ADDRESS", "", false, false, toString)
	return v
}

func getCartesiContractsApplicationDeploymentBlockNumber() string {
	v := get("CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER", "", false, false, toString)
	return v
}

func getCartesiContractsAuthorityAddress() string {
	v := get("CARTESI_CONTRACTS_AUTHORITY_ADDRESS", "", false, false, toString)
	return v
}

func getCartesiContractsHistoryAddress() string {
	v := get("CARTESI_CONTRACTS_HISTORY_ADDRESS", "", false, false, toString)
	return v
}

func getCartesiContractsInputBoxAddress() string {
	v := get("CARTESI_CONTRACTS_INPUT_BOX_ADDRESS", "", false, false, toString)
	return v
}

func getCartesiExperimentalSunodoValidatorEnabled() bool {
	v := get("CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_ENABLED", "false", true, false, toBool)
	return v
}

func getCartesiExperimentalSunodoValidatorRedisEndpoint() string {
	v := get("CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_REDIS_ENDPOINT", "", false, false, toString)
	return v
}

func getCartesiFeatureDisableClaimer() bool {
	v := get("CARTESI_FEATURE_DISABLE_CLAIMER", "false", true, false, toBool)
	return v
}

func getCartesiFeatureDisableMachineHashCheck() bool {
	v := get("CARTESI_FEATURE_DISABLE_MACHINE_HASH_CHECK", "false", true, false, toBool)
	return v
}

func getCartesiFeatureHostMode() bool {
	v := get("CARTESI_FEATURE_HOST_MODE", "false", true, false, toBool)
	return v
}

func getCartesiHttpAddress() string {
	v := get("CARTESI_HTTP_ADDRESS", "127.0.0.1", true, false, toString)
	return v
}

func getCartesiHttpPort() int {
	v := get("CARTESI_HTTP_PORT", "10000", true, false, toInt)
	return v
}

func getCartesiLogLevel() LogLevel {
	v := get("CARTESI_LOG_LEVEL", "info", true, false, toLogLevel)
	return v
}

func getCartesiLogTimestamp() bool {
	v := get("CARTESI_LOG_TIMESTAMP", "false", true, false, toBool)
	return v
}

func getCartesiPostgresEndpoint() string {
	v := get("CARTESI_POSTGRES_ENDPOINT", "", true, true, toString)
	return v
}

func getCartesiEpochDuration() Duration {
	v := get("CARTESI_EPOCH_DURATION", "86400", true, false, toDuration)
	return v
}

func getCartesiSnapshotDir() string {
	v := get("CARTESI_SNAPSHOT_DIR", "", false, false, toString)
	return v
}

type NodeConfig struct {
	CartesiBlockchainBlockTimeout                    int
	CartesiBlockchainFinalityOffset                  int
	CartesiBlockchainHttpEndpoint                    string
	CartesiBlockchainId                              int
	CartesiBlockchainIsLegacy                        bool
	CartesiBlockchainWsEndpoint                      string
	CartesiContractsInputBoxDeploymentBlockNumber    int64
	CartesiContractsApplicationAddress               string
	CartesiContractsApplicationDeploymentBlockNumber string
	CartesiContractsAuthorityAddress                 string
	CartesiContractsHistoryAddress                   string
	CartesiContractsInputBoxAddress                  string
	CartesiExperimentalSunodoValidatorEnabled        bool
	CartesiExperimentalSunodoValidatorRedisEndpoint  string
	CartesiFeatureDisableClaimer                     bool
	CartesiFeatureDisableMachineHashCheck            bool
	CartesiFeatureHostMode                           bool
	CartesiHttpAddress                               string
	CartesiHttpPort                                  int
	CartesiLogLevel                                  LogLevel
	CartesiLogTimestamp                              bool
	CartesiPostgresEndpoint                          string
	CartesiEpochDuration                             Duration
	CartesiSnapshotDir                               string
	CartesiAuth                                      Auth
}

func NewNodeConfigFromEnv() NodeConfig {
	nodeConfig := NodeConfig{
		CartesiBlockchainBlockTimeout:                    getCartesiBlockchainBlockTimeout(),
		CartesiBlockchainFinalityOffset:                  getCartesiBlockchainFinalityOffset(),
		CartesiBlockchainHttpEndpoint:                    getCartesiBlockchainHttpEndpoint(),
		CartesiBlockchainId:                              getCartesiBlockchainId(),
		CartesiBlockchainIsLegacy:                        getCartesiBlockchainIsLegacy(),
		CartesiBlockchainWsEndpoint:                      getCartesiBlockchainWsEndpoint(),
		CartesiContractsInputBoxDeploymentBlockNumber:    getCartesiContractsInputBoxDeploymentBlockNumber(),
		CartesiContractsApplicationAddress:               getCartesiContractsApplicationAddress(),
		CartesiContractsApplicationDeploymentBlockNumber: getCartesiContractsApplicationDeploymentBlockNumber(),
		CartesiContractsAuthorityAddress:                 getCartesiContractsAuthorityAddress(),
		CartesiContractsHistoryAddress:                   getCartesiContractsHistoryAddress(),
		CartesiContractsInputBoxAddress:                  getCartesiContractsInputBoxAddress(),
		CartesiExperimentalSunodoValidatorEnabled:        getCartesiExperimentalSunodoValidatorEnabled(),
		CartesiExperimentalSunodoValidatorRedisEndpoint:  getCartesiExperimentalSunodoValidatorRedisEndpoint(),
		CartesiFeatureDisableClaimer:                     getCartesiFeatureDisableClaimer(),
		CartesiFeatureDisableMachineHashCheck:            getCartesiFeatureDisableMachineHashCheck(),
		CartesiFeatureHostMode:                           getCartesiFeatureHostMode(),
		CartesiHttpAddress:                               getCartesiHttpAddress(),
		CartesiHttpPort:                                  getCartesiHttpPort(),
		CartesiLogLevel:                                  getCartesiLogLevel(),
		CartesiLogTimestamp:                              getCartesiLogTimestamp(),
		CartesiPostgresEndpoint:                          getCartesiPostgresEndpoint(),
		CartesiEpochDuration:                             getCartesiEpochDuration(),
		CartesiSnapshotDir:                               getCartesiSnapshotDir(),
	}
	nodeConfig.CartesiAuth = getAuth()
	return nodeConfig
}

func NewNodeConfig() NodeConfig {
	nodeConfig := NodeConfig{}
	cartesiBlockchainBlockTimeout, err := toInt("60")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiBlockchainBlockTimeout = cartesiBlockchainBlockTimeout
	cartesiBlockchainFinalityOffset, err := toInt("10")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiBlockchainFinalityOffset = cartesiBlockchainFinalityOffset
	cartesiBlockchainIsLegacy, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiBlockchainIsLegacy = cartesiBlockchainIsLegacy
	cartesiExperimentalSunodoValidatorEnabled, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiExperimentalSunodoValidatorEnabled = cartesiExperimentalSunodoValidatorEnabled
	cartesiFeatureDisableClaimer, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiFeatureDisableClaimer = cartesiFeatureDisableClaimer
	cartesiFeatureDisableMachineHashCheck, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiFeatureDisableMachineHashCheck = cartesiFeatureDisableMachineHashCheck
	cartesiFeatureHostMode, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiFeatureHostMode = cartesiFeatureHostMode
	cartesiHttpAddress, err := toString("127.0.0.1")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiHttpAddress = cartesiHttpAddress
	cartesiHttpPort, err := toInt("10000")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiHttpPort = cartesiHttpPort
	cartesiLogLevel, err := toLogLevel("info")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiLogLevel = cartesiLogLevel
	cartesiLogTimestamp, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiLogTimestamp = cartesiLogTimestamp
	cartesiEpochDuration, err := toDuration("86400")
	if err != nil {
		panic(err)
	}
	nodeConfig.CartesiEpochDuration = cartesiEpochDuration
	nodeConfig.CartesiAuth = AuthMnemonic{
		Mnemonic:     "test test test test test test test test test test test junk",
		AccountIndex: 0,
	}
	return nodeConfig
}
