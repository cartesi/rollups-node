// Code generated by internal/config/generate.
// DO NOT EDIT.

// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

package config

import (
	"log/slog"
	"time"
)

type (
	Duration = time.Duration
)

type NodeConfig struct {
	cartesiBlockchainBlockTimeout                    *int
	cartesiBlockchainFinalityOffset                  *int
	cartesiBlockchainHttpEndpoint                    *string
	cartesiBlockchainId                              *int
	cartesiBlockchainIsLegacy                        *bool
	cartesiBlockchainWsEndpoint                      *string
	cartesiContractsInputBoxDeploymentBlockNumber    *int64
	cartesiContractsApplicationAddress               *string
	cartesiContractsApplicationDeploymentBlockNumber *string
	cartesiContractsAuthorityAddress                 *string
	cartesiContractsHistoryAddress                   *string
	cartesiContractsInputBoxAddress                  *string
	cartesiExperimentalSunodoValidatorEnabled        *bool
	cartesiExperimentalSunodoValidatorRedisEndpoint  *string
	cartesiFeatureDisableClaimer                     *bool
	cartesiFeatureDisableMachineHashCheck            *bool
	cartesiFeatureHostMode                           *bool
	cartesiHttpAddress                               *string
	cartesiHttpPort                                  *int
	cartesiLogLevel                                  *LogLevel
	cartesiLogPretty                                 *bool
	cartesiPostgresEndpoint                          *string
	cartesiEpochDuration                             *Duration
	cartesiSnapshotDir                               *string
	cartesiAuth                                      *Auth
	cartesiAuthError                                 error
}

func (nodeConfig *NodeConfig) CartesiBlockchainBlockTimeout() int {
	if nodeConfig.cartesiBlockchainBlockTimeout == nil {
		fail("Missing required CARTESI_BLOCKCHAIN_BLOCK_TIMEOUT env var")
	}
	return *nodeConfig.cartesiBlockchainBlockTimeout
}

func (nodeConfig *NodeConfig) SetCartesiBlockchainBlockTimeout(v *int) {
	nodeConfig.cartesiBlockchainBlockTimeout = v
}

func (nodeConfig *NodeConfig) CartesiBlockchainFinalityOffset() int {
	if nodeConfig.cartesiBlockchainFinalityOffset == nil {
		fail("Missing required CARTESI_BLOCKCHAIN_FINALITY_OFFSET env var")
	}
	return *nodeConfig.cartesiBlockchainFinalityOffset
}

func (nodeConfig *NodeConfig) SetCartesiBlockchainFinalityOffset(v *int) {
	nodeConfig.cartesiBlockchainFinalityOffset = v
}

func (nodeConfig *NodeConfig) CartesiBlockchainHttpEndpoint() string {
	if nodeConfig.cartesiBlockchainHttpEndpoint == nil {
		fail("Missing required CARTESI_BLOCKCHAIN_HTTP_ENDPOINT env var")
	}
	return *nodeConfig.cartesiBlockchainHttpEndpoint
}

func (nodeConfig *NodeConfig) SetCartesiBlockchainHttpEndpoint(v *string) {
	nodeConfig.cartesiBlockchainHttpEndpoint = v
}

func (nodeConfig *NodeConfig) CartesiBlockchainId() int {
	if nodeConfig.cartesiBlockchainId == nil {
		fail("Missing required CARTESI_BLOCKCHAIN_ID env var")
	}
	return *nodeConfig.cartesiBlockchainId
}

func (nodeConfig *NodeConfig) SetCartesiBlockchainId(v *int) {
	nodeConfig.cartesiBlockchainId = v
}

func (nodeConfig *NodeConfig) CartesiBlockchainIsLegacy() bool {
	if nodeConfig.cartesiBlockchainIsLegacy == nil {
		fail("Missing required CARTESI_BLOCKCHAIN_IS_LEGACY env var")
	}
	return *nodeConfig.cartesiBlockchainIsLegacy
}

func (nodeConfig *NodeConfig) SetCartesiBlockchainIsLegacy(v *bool) {
	nodeConfig.cartesiBlockchainIsLegacy = v
}

func (nodeConfig *NodeConfig) CartesiBlockchainWsEndpoint() string {
	if nodeConfig.cartesiBlockchainWsEndpoint == nil {
		fail("Missing required CARTESI_BLOCKCHAIN_WS_ENDPOINT env var")
	}
	return *nodeConfig.cartesiBlockchainWsEndpoint
}

func (nodeConfig *NodeConfig) SetCartesiBlockchainWsEndpoint(v *string) {
	nodeConfig.cartesiBlockchainWsEndpoint = v
}

func (nodeConfig *NodeConfig) CartesiContractsInputBoxDeploymentBlockNumber() int64 {
	if nodeConfig.cartesiContractsInputBoxDeploymentBlockNumber == nil {
		fail("Missing required CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER env var")
	}
	return *nodeConfig.cartesiContractsInputBoxDeploymentBlockNumber
}

func (nodeConfig *NodeConfig) SetCartesiContractsInputBoxDeploymentBlockNumber(v *int64) {
	nodeConfig.cartesiContractsInputBoxDeploymentBlockNumber = v
}

func (nodeConfig *NodeConfig) CartesiContractsApplicationAddress() string {
	if nodeConfig.cartesiContractsApplicationAddress == nil {
		fail("Missing required CARTESI_CONTRACTS_APPLICATION_ADDRESS env var")
	}
	return *nodeConfig.cartesiContractsApplicationAddress
}

func (nodeConfig *NodeConfig) SetCartesiContractsApplicationAddress(v *string) {
	nodeConfig.cartesiContractsApplicationAddress = v
}

func (nodeConfig *NodeConfig) CartesiContractsApplicationDeploymentBlockNumber() string {
	if nodeConfig.cartesiContractsApplicationDeploymentBlockNumber == nil {
		fail("Missing required CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER env var")
	}
	return *nodeConfig.cartesiContractsApplicationDeploymentBlockNumber
}

func (nodeConfig *NodeConfig) SetCartesiContractsApplicationDeploymentBlockNumber(v *string) {
	nodeConfig.cartesiContractsApplicationDeploymentBlockNumber = v
}

func (nodeConfig *NodeConfig) CartesiContractsAuthorityAddress() string {
	if nodeConfig.cartesiContractsAuthorityAddress == nil {
		fail("Missing required CARTESI_CONTRACTS_AUTHORITY_ADDRESS env var")
	}
	return *nodeConfig.cartesiContractsAuthorityAddress
}

func (nodeConfig *NodeConfig) SetCartesiContractsAuthorityAddress(v *string) {
	nodeConfig.cartesiContractsAuthorityAddress = v
}

func (nodeConfig *NodeConfig) CartesiContractsHistoryAddress() string {
	if nodeConfig.cartesiContractsHistoryAddress == nil {
		fail("Missing required CARTESI_CONTRACTS_HISTORY_ADDRESS env var")
	}
	return *nodeConfig.cartesiContractsHistoryAddress
}

func (nodeConfig *NodeConfig) SetCartesiContractsHistoryAddress(v *string) {
	nodeConfig.cartesiContractsHistoryAddress = v
}

func (nodeConfig *NodeConfig) CartesiContractsInputBoxAddress() string {
	if nodeConfig.cartesiContractsInputBoxAddress == nil {
		fail("Missing required CARTESI_CONTRACTS_INPUT_BOX_ADDRESS env var")
	}
	return *nodeConfig.cartesiContractsInputBoxAddress
}

func (nodeConfig *NodeConfig) SetCartesiContractsInputBoxAddress(v *string) {
	nodeConfig.cartesiContractsInputBoxAddress = v
}

func (nodeConfig *NodeConfig) CartesiExperimentalSunodoValidatorEnabled() bool {
	if nodeConfig.cartesiExperimentalSunodoValidatorEnabled == nil {
		fail("Missing required CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_ENABLED env var")
	}
	return *nodeConfig.cartesiExperimentalSunodoValidatorEnabled
}

func (nodeConfig *NodeConfig) SetCartesiExperimentalSunodoValidatorEnabled(v *bool) {
	nodeConfig.cartesiExperimentalSunodoValidatorEnabled = v
}

func (nodeConfig *NodeConfig) CartesiExperimentalSunodoValidatorRedisEndpoint() string {
	if nodeConfig.cartesiExperimentalSunodoValidatorRedisEndpoint == nil {
		fail("Missing required CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_REDIS_ENDPOINT env var")
	}
	return *nodeConfig.cartesiExperimentalSunodoValidatorRedisEndpoint
}

func (nodeConfig *NodeConfig) SetCartesiExperimentalSunodoValidatorRedisEndpoint(v *string) {
	nodeConfig.cartesiExperimentalSunodoValidatorRedisEndpoint = v
}

func (nodeConfig *NodeConfig) CartesiFeatureDisableClaimer() bool {
	if nodeConfig.cartesiFeatureDisableClaimer == nil {
		fail("Missing required CARTESI_FEATURE_DISABLE_CLAIMER env var")
	}
	return *nodeConfig.cartesiFeatureDisableClaimer
}

func (nodeConfig *NodeConfig) SetCartesiFeatureDisableClaimer(v *bool) {
	nodeConfig.cartesiFeatureDisableClaimer = v
}

func (nodeConfig *NodeConfig) CartesiFeatureDisableMachineHashCheck() bool {
	if nodeConfig.cartesiFeatureDisableMachineHashCheck == nil {
		fail("Missing required CARTESI_FEATURE_DISABLE_MACHINE_HASH_CHECK env var")
	}
	return *nodeConfig.cartesiFeatureDisableMachineHashCheck
}

func (nodeConfig *NodeConfig) SetCartesiFeatureDisableMachineHashCheck(v *bool) {
	nodeConfig.cartesiFeatureDisableMachineHashCheck = v
}

func (nodeConfig *NodeConfig) CartesiFeatureHostMode() bool {
	if nodeConfig.cartesiFeatureHostMode == nil {
		fail("Missing required CARTESI_FEATURE_HOST_MODE env var")
	}
	return *nodeConfig.cartesiFeatureHostMode
}

func (nodeConfig *NodeConfig) SetCartesiFeatureHostMode(v *bool) {
	nodeConfig.cartesiFeatureHostMode = v
}

func (nodeConfig *NodeConfig) CartesiHttpAddress() string {
	if nodeConfig.cartesiHttpAddress == nil {
		fail("Missing required CARTESI_HTTP_ADDRESS env var")
	}
	return *nodeConfig.cartesiHttpAddress
}

func (nodeConfig *NodeConfig) SetCartesiHttpAddress(v *string) {
	nodeConfig.cartesiHttpAddress = v
}

func (nodeConfig *NodeConfig) CartesiHttpPort() int {
	if nodeConfig.cartesiHttpPort == nil {
		fail("Missing required CARTESI_HTTP_PORT env var")
	}
	return *nodeConfig.cartesiHttpPort
}

func (nodeConfig *NodeConfig) SetCartesiHttpPort(v *int) {
	nodeConfig.cartesiHttpPort = v
}

func (nodeConfig *NodeConfig) CartesiLogLevel() LogLevel {
	if nodeConfig.cartesiLogLevel == nil {
		fail("Missing required CARTESI_LOG_LEVEL env var")
	}
	return *nodeConfig.cartesiLogLevel
}

func (nodeConfig *NodeConfig) SetCartesiLogLevel(v *LogLevel) {
	nodeConfig.cartesiLogLevel = v
}

func (nodeConfig *NodeConfig) CartesiLogPretty() bool {
	if nodeConfig.cartesiLogPretty == nil {
		fail("Missing required CARTESI_LOG_PRETTY env var")
	}
	return *nodeConfig.cartesiLogPretty
}

func (nodeConfig *NodeConfig) SetCartesiLogPretty(v *bool) {
	nodeConfig.cartesiLogPretty = v
}

func (nodeConfig *NodeConfig) CartesiPostgresEndpoint() string {
	if nodeConfig.cartesiPostgresEndpoint == nil {
		fail("Missing required CARTESI_POSTGRES_ENDPOINT env var")
	}
	return *nodeConfig.cartesiPostgresEndpoint
}

func (nodeConfig *NodeConfig) SetCartesiPostgresEndpoint(v *string) {
	nodeConfig.cartesiPostgresEndpoint = v
}

func (nodeConfig *NodeConfig) CartesiEpochDuration() Duration {
	if nodeConfig.cartesiEpochDuration == nil {
		fail("Missing required CARTESI_EPOCH_DURATION env var")
	}
	return *nodeConfig.cartesiEpochDuration
}

func (nodeConfig *NodeConfig) SetCartesiEpochDuration(v *Duration) {
	nodeConfig.cartesiEpochDuration = v
}

func (nodeConfig *NodeConfig) CartesiSnapshotDir() string {
	if nodeConfig.cartesiSnapshotDir == nil {
		fail("Missing required CARTESI_SNAPSHOT_DIR env var")
	}
	return *nodeConfig.cartesiSnapshotDir
}

func (nodeConfig *NodeConfig) SetCartesiSnapshotDir(v *string) {
	nodeConfig.cartesiSnapshotDir = v
}

func (nodeConfig *NodeConfig) CartesiAuth() Auth {
	if nodeConfig.cartesiAuth == nil {
		panic(nodeConfig.cartesiAuthError)
	}
	return *nodeConfig.cartesiAuth
}

func (nodeConfig *NodeConfig) SetCartesiAuth(v *Auth) {
	nodeConfig.cartesiAuth = v
}

func NewNodeConfigFromEnv() NodeConfig {
	nodeConfig := NodeConfig{
		cartesiBlockchainBlockTimeout:                    getOptional("CARTESI_BLOCKCHAIN_BLOCK_TIMEOUT", "60", true, toInt),
		cartesiBlockchainFinalityOffset:                  getOptional("CARTESI_BLOCKCHAIN_FINALITY_OFFSET", "10", true, toInt),
		cartesiBlockchainHttpEndpoint:                    getOptional("CARTESI_BLOCKCHAIN_HTTP_ENDPOINT", "", false, toString),
		cartesiBlockchainId:                              getOptional("CARTESI_BLOCKCHAIN_ID", "", false, toInt),
		cartesiBlockchainIsLegacy:                        getOptional("CARTESI_BLOCKCHAIN_IS_LEGACY", "false", true, toBool),
		cartesiBlockchainWsEndpoint:                      getOptional("CARTESI_BLOCKCHAIN_WS_ENDPOINT", "", false, toString),
		cartesiContractsInputBoxDeploymentBlockNumber:    getOptional("CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER", "", false, toInt64),
		cartesiContractsApplicationAddress:               getOptional("CARTESI_CONTRACTS_APPLICATION_ADDRESS", "", false, toString),
		cartesiContractsApplicationDeploymentBlockNumber: getOptional("CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER", "", false, toString),
		cartesiContractsAuthorityAddress:                 getOptional("CARTESI_CONTRACTS_AUTHORITY_ADDRESS", "", false, toString),
		cartesiContractsHistoryAddress:                   getOptional("CARTESI_CONTRACTS_HISTORY_ADDRESS", "", false, toString),
		cartesiContractsInputBoxAddress:                  getOptional("CARTESI_CONTRACTS_INPUT_BOX_ADDRESS", "", false, toString),
		cartesiExperimentalSunodoValidatorEnabled:        getOptional("CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_ENABLED", "false", true, toBool),
		cartesiExperimentalSunodoValidatorRedisEndpoint:  getOptional("CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_REDIS_ENDPOINT", "", false, toString),
		cartesiFeatureDisableClaimer:                     getOptional("CARTESI_FEATURE_DISABLE_CLAIMER", "false", true, toBool),
		cartesiFeatureDisableMachineHashCheck:            getOptional("CARTESI_FEATURE_DISABLE_MACHINE_HASH_CHECK", "false", true, toBool),
		cartesiFeatureHostMode:                           getOptional("CARTESI_FEATURE_HOST_MODE", "false", true, toBool),
		cartesiHttpAddress:                               getOptional("CARTESI_HTTP_ADDRESS", "127.0.0.1", true, toString),
		cartesiHttpPort:                                  getOptional("CARTESI_HTTP_PORT", "10000", true, toInt),
		cartesiLogLevel:                                  getOptional("CARTESI_LOG_LEVEL", "info", true, toLogLevel),
		cartesiLogPretty:                                 getOptional("CARTESI_LOG_PRETTY", "false", true, toBool),
		cartesiPostgresEndpoint:                          getOptional("CARTESI_POSTGRES_ENDPOINT", "", true, toString),
		cartesiEpochDuration:                             getOptional("CARTESI_EPOCH_DURATION", "86400", true, toDuration),
		cartesiSnapshotDir:                               getOptional("CARTESI_SNAPSHOT_DIR", "", false, toString),
	}
	nodeConfig.cartesiAuth, nodeConfig.cartesiAuthError = getAuth()
	return nodeConfig
}

func NewNodeConfig() NodeConfig {
	nodeConfig := NodeConfig{}
	cartesiblockchainblocktimeout, err := toInt("60")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiBlockchainBlockTimeout = &cartesiblockchainblocktimeout

	cartesiblockchainfinalityoffset, err := toInt("10")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiBlockchainFinalityOffset = &cartesiblockchainfinalityoffset

	cartesiblockchainislegacy, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiBlockchainIsLegacy = &cartesiblockchainislegacy

	cartesiexperimentalsunodovalidatorenabled, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiExperimentalSunodoValidatorEnabled = &cartesiexperimentalsunodovalidatorenabled

	cartesifeaturedisableclaimer, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiFeatureDisableClaimer = &cartesifeaturedisableclaimer

	cartesifeaturedisablemachinehashcheck, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiFeatureDisableMachineHashCheck = &cartesifeaturedisablemachinehashcheck

	cartesifeaturehostmode, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiFeatureHostMode = &cartesifeaturehostmode

	cartesihttpaddress, err := toString("127.0.0.1")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiHttpAddress = &cartesihttpaddress

	cartesihttpport, err := toInt("10000")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiHttpPort = &cartesihttpport

	cartesiloglevel, err := toLogLevel("info")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiLogLevel = &cartesiloglevel

	cartesilogpretty, err := toBool("false")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiLogPretty = &cartesilogpretty

	cartesiepochduration, err := toDuration("86400")
	if err != nil {
		panic(err)
	}
	nodeConfig.cartesiEpochDuration = &cartesiepochduration

	var auth Auth = AuthMnemonic{
		Mnemonic:     "test test test test test test test test test test test junk",
		AccountIndex: 0,
	}
	nodeConfig.cartesiAuth = &auth
	nodeConfig.cartesiAuthError = nil
	return nodeConfig
}

func (c NodeConfig) LogValue() slog.Value {
	var attrs = make([]slog.Attr, 29)
	if c.cartesiBlockchainBlockTimeout != nil {
		attrs = append(attrs, slog.Any("CARTESI_BLOCKCHAIN_BLOCK_TIMEOUT", *c.cartesiBlockchainBlockTimeout))
	}
	if c.cartesiBlockchainFinalityOffset != nil {
		attrs = append(attrs, slog.Any("CARTESI_BLOCKCHAIN_FINALITY_OFFSET", *c.cartesiBlockchainFinalityOffset))
	}
	if c.cartesiBlockchainHttpEndpoint != nil {
		attrs = append(attrs, slog.Any("CARTESI_BLOCKCHAIN_HTTP_ENDPOINT", *c.cartesiBlockchainHttpEndpoint))
	}
	if c.cartesiBlockchainId != nil {
		attrs = append(attrs, slog.Any("CARTESI_BLOCKCHAIN_ID", *c.cartesiBlockchainId))
	}
	if c.cartesiBlockchainIsLegacy != nil {
		attrs = append(attrs, slog.Any("CARTESI_BLOCKCHAIN_IS_LEGACY", *c.cartesiBlockchainIsLegacy))
	}
	if c.cartesiBlockchainWsEndpoint != nil {
		attrs = append(attrs, slog.Any("CARTESI_BLOCKCHAIN_WS_ENDPOINT", *c.cartesiBlockchainWsEndpoint))
	}
	if c.cartesiContractsInputBoxDeploymentBlockNumber != nil {
		attrs = append(attrs, slog.Any("CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER", *c.cartesiContractsInputBoxDeploymentBlockNumber))
	}
	if c.cartesiContractsApplicationAddress != nil {
		attrs = append(attrs, slog.Any("CARTESI_CONTRACTS_APPLICATION_ADDRESS", *c.cartesiContractsApplicationAddress))
	}
	if c.cartesiContractsApplicationDeploymentBlockNumber != nil {
		attrs = append(attrs, slog.Any("CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER", *c.cartesiContractsApplicationDeploymentBlockNumber))
	}
	if c.cartesiContractsAuthorityAddress != nil {
		attrs = append(attrs, slog.Any("CARTESI_CONTRACTS_AUTHORITY_ADDRESS", *c.cartesiContractsAuthorityAddress))
	}
	if c.cartesiContractsHistoryAddress != nil {
		attrs = append(attrs, slog.Any("CARTESI_CONTRACTS_HISTORY_ADDRESS", *c.cartesiContractsHistoryAddress))
	}
	if c.cartesiContractsInputBoxAddress != nil {
		attrs = append(attrs, slog.Any("CARTESI_CONTRACTS_INPUT_BOX_ADDRESS", *c.cartesiContractsInputBoxAddress))
	}
	if c.cartesiExperimentalSunodoValidatorEnabled != nil {
		attrs = append(attrs, slog.Any("CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_ENABLED", *c.cartesiExperimentalSunodoValidatorEnabled))
	}
	if c.cartesiExperimentalSunodoValidatorRedisEndpoint != nil {
		attrs = append(attrs, slog.Any("CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_REDIS_ENDPOINT", *c.cartesiExperimentalSunodoValidatorRedisEndpoint))
	}
	if c.cartesiFeatureDisableClaimer != nil {
		attrs = append(attrs, slog.Any("CARTESI_FEATURE_DISABLE_CLAIMER", *c.cartesiFeatureDisableClaimer))
	}
	if c.cartesiFeatureDisableMachineHashCheck != nil {
		attrs = append(attrs, slog.Any("CARTESI_FEATURE_DISABLE_MACHINE_HASH_CHECK", *c.cartesiFeatureDisableMachineHashCheck))
	}
	if c.cartesiFeatureHostMode != nil {
		attrs = append(attrs, slog.Any("CARTESI_FEATURE_HOST_MODE", *c.cartesiFeatureHostMode))
	}
	if c.cartesiHttpAddress != nil {
		attrs = append(attrs, slog.Any("CARTESI_HTTP_ADDRESS", *c.cartesiHttpAddress))
	}
	if c.cartesiHttpPort != nil {
		attrs = append(attrs, slog.Any("CARTESI_HTTP_PORT", *c.cartesiHttpPort))
	}
	if c.cartesiLogLevel != nil {
		attrs = append(attrs, slog.Any("CARTESI_LOG_LEVEL", *c.cartesiLogLevel))
	}
	if c.cartesiLogPretty != nil {
		attrs = append(attrs, slog.Any("CARTESI_LOG_PRETTY", *c.cartesiLogPretty))
	}
	if c.cartesiEpochDuration != nil {
		attrs = append(attrs, slog.Any("CARTESI_EPOCH_DURATION", *c.cartesiEpochDuration))
	}
	if c.cartesiSnapshotDir != nil {
		attrs = append(attrs, slog.Any("CARTESI_SNAPSHOT_DIR", *c.cartesiSnapshotDir))
	}
	if c.cartesiAuth != nil {
		attrs = append(attrs, slog.Any("Auth", *c.cartesiAuth))
	}
	return slog.GroupValue(attrs...)
}
