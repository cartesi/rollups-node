// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

package main

import (
	"fmt"
	"go/format"
	"os"
	"strings"
	"unicode"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"github.com/BurntSushi/toml"
)

// An entry in the toml's top level table representing an environment variable.
type Env struct {
	// The default value for the variable.
	// This field is optional.
	Default *string `toml:"default"`
	// The Go type for the environment variable.
	// This field must be set for all variables.
	GoType string `toml:"go-type"`
	// If true, the generated get function will be exported by the config module.
	// By default, this field is true.
	Export *bool `toml:"export"`
}

// Generates the get function for the environment variable.
func (e Env) toFunction(env string) string {
	name := toFunctionName(env)
	typ := e.GoType
	get := "get"

	var defaultValue string
	hasDefault := e.Default != nil
	if hasDefault {
		defaultValue = *e.Default
	}

	to_ := []rune(e.GoType)
	to_[0] = unicode.ToUpper(to_[0])
	to := "to" + string(to_)

	args := fmt.Sprintf(`"%s", "%s", %t, %s`, env, defaultValue, hasDefault, to)

	if e.Export == nil || *e.Export {
		name = "Get" + name
	} else {
		name = "get" + name
		typ = fmt.Sprintf("(%s, bool)", typ)
		get += "Optional"
	}

	return fmt.Sprintf("func %s() %s { return %s(%s) }\n", name, typ, get, args)
}

// Splits the string by "_" and joins each substring with the first letter in upper case.
func toFunctionName(env string) string {
	caser := cases.Title(language.English)
	words := strings.Split(env, "_")
	for i, word := range words {
		words[i] = caser.String(word)
	}
	return strings.Join(words, "")
}

func addLine(builder *strings.Builder, s string, a ...any) {
	builder.WriteString(fmt.Sprintf(s, a...))
	builder.WriteString("\n")
}

// This script will read the Config.toml file and create a get.go file
// with get functions for each environment variable.
// Each table entry in the toml file translates into an environment variable.
// In Go, this becomes a map[string]Env, with the keys of the map being the variables' names.
// We format the get.go file after generating all the get functions.
func main() {
	// reading the toml file
	bytes, err := os.ReadFile("generate/Config.toml")
	if err != nil {
		panic(err)
	}

	// decoding the toml file
	var config map[string]Env
	_, err = toml.Decode(string(bytes), &config)
	if err != nil {
		panic(err)
	}

	// creating the header
	var builder strings.Builder
	addLine(&builder, `// Code generated by internal/config/generate.`)
	addLine(&builder, `// DO NOT EDIT.`)
	addLine(&builder, "")

	addLine(&builder, `// (c) Cartesi and individual authors (see AUTHORS)`)
	addLine(&builder, `// SPDX-License-Identifier: Apache-2.0 (see LICENSE)`)
	addLine(&builder, "")

	addLine(&builder, `package config`)
	addLine(&builder, `import (`)
	addLine(&builder, `"time"`)
	addLine(&builder, `)`)
	addLine(&builder, "")

	// adding type aliases for the <to> functions
	addLine(&builder, `type (`)
	addLine(&builder, `Duration = time.Duration`)
	addLine(&builder, `)`)
	addLine(&builder, "")

	// adding the <get> functions
	for name, env := range config {
		addLine(&builder, env.toFunction(name))
	}

	// assembling the final string
	s := builder.String()
	bytes, err = format.Source([]byte(s))
	if err != nil {
		panic(err)
	}

	// creating the file
	file, err := os.Create("get.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()
	_, err = file.Write(bytes)
	if err != nil {
		panic(err)
	}
}
