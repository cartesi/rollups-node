# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build and test

on:
  pull_request:
  push:
    tags:
      - v*
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write
  id-token: write
  contents: write

jobs:
  test:
    runs-on: ubuntu-22.04
    container: 
      image: rust:1.77.0-bookworm
    env:
      RUSTFLAGS: -D warnings -C debuginfo=0
    defaults:
      run:
        working-directory: offchain
    steps:

      - name: Install Git
        working-directory: .
        run: su - && apt update &&  apt install -y git-all

      - name: Install Docker
        working-directory: .
        run: |
          su -
          apt update && apt install -y --no-install-recommends ca-certificates curl
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install -y --no-install-recommends docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ðŸ“¦ Install protoc
        working-directory: .
        run: su - && apt update && apt install -y protobuf-compiler libprotobuf-dev

      - name: Install Cartesi Machine
        working-directory: .
        run: | 
          ARCH=$(dpkg --print-architecture)
          curl -fsSL https://github.com/cartesi/machine-emulator/releases/download/v0.16.1/cartesi-machine-v0.16.1_${ARCH}.deb -o ./cartesi-machine.deb
          su -
          apt-get install -y ./cartesi-machine.deb

      - uses: depot/setup-action@v1
      - name: Build dependency images
        uses: depot/bake-action@v1
        with:
          files: |
            ./docker-bake.hcl
            ./docker-bake.override.hcl
            ./docker-bake.platforms.hcl
          targets: |
            rollups-node-devnet
            rollups-node-snapshot
          project: ${{ vars.DEPOT_PROJECT }}
          workdir: build
          load: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            offchain/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install cargo sweep
        run: cargo install cargo-sweep
        continue-on-error: true

      - name: Install cargo cache
        run: cargo install cargo-cache
        continue-on-error: true

      - name: Set sweep timestamp
        run: cargo sweep -s

      - name: Install Rust Code dependencies
        working-directory: .
        run : |
          su -
          apt update
          apt install -y --no-install-recommends \
          pkg-config \
          libssl-dev \
          curl \
          libpq5 \
          redis \
          redis-tools \
          libboost-coroutine1.81.0 \
          libboost-context1.81.0 \
          libboost-filesystem1.81.0 \
          libboost-log1.81.0 \
          libcrypto++8 \
          procps

      - name: Build binaries and tests
        run: cargo build --all-targets

      - name: Clean old build files
        run: cargo sweep -f

      - name: Clean dependencies source files
        run: cargo cache --autoclean

      # - name: Run tests
      #   run: cargo test

      - name: Generate GraphQL schema
        run: ./target/debug/generate-schema

      - name: Upload GraphQL schema
        uses: actions/upload-artifact@v4
        with:
          name: graphql-schema
          path: offchain/schema.graphql
          if-no-files-found: error

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run Go tests
        working-directory: ${{ github.workspace }}
        run: go test ./...

  
